{
    "collab_server" : "",
    "contents" : "#####################################################\n##Just the R code in lectures from course:\n##Introduction to Data Science using R\n##Justin Post 2017\n#####################################################\n\n#####################################################\n##Part I\n#####################################################\n\n#####################################################\n##Objects and Common Classes\n\n#simple math operations (# is a comment, not evaluated)\n3 + 7\n10 * exp(3)\nlog(pi^2) #log is natural log by default\n\n#save for later\navg <- (5 + 7 + 6) / 3\n#call avg object\navg\n#strings can be saved as well\nwords <- \"Hello there!\"\nwords\n\n#vectors (1 dimensional) objects\n#all elements of the same 'type'\nx <- c(1, 3, 10, -20, sqrt(2))\ny <- c(\"cat\", \"dog\", \"bird\", \"floor\")\nx\ny\n\n1:20 / 20\nseq(from = 1, to = 10, by = 2)\nrunif(4, min = 0, max = 1)\n\n\n#populate vectors\nx <- rep(0.2, times = 6)\ny <- c(1, 3, 4, -1, 5, 6)\n\n#check 'type'\nis.numeric(x)\nis.numeric(y)\n\n#check 'length'\nlength(x)\nlength(y)\n\n#combine in a matrix (check help(matrix))\nmatrix(c(x, y), ncol = 2)\n\nx <- c(\"Hi\", \"There\", \"!\")\ny <- c(\"a\", \"b\", \"c\")\nz <- c(\"One\", \"Two\", \"Three\")\nis.character(x)\nmatrix(c(x, y, z), nrow = 3)\n\n#data frames\nx <- c(\"a\", \"b\", \"c\", \"d\", \"e\", \"f\")\ny <- c(1, 3, 4, -1, 5, 6)\nz <- 10:15\ndata.frame(x, y, z)\ndata.frame(char = x, data1 = y, data2 = z)\n\n#lists\nlist(\"Hi\", 1, 2, \"!\")\n\nx <- c(\"Hi\", \"There\", \"!\")\ny <- c(1, 3, 4, -1, 5, 6)\nlist(x, y)\n\n\n#####################################################\n##Attributes and Basic Data Manipulation\n\niris\nstr(iris)\nattributes(iris)\n\n#accessing vector values\nletters #built in vector\nletters[10]\n\nletters[1:4]\nletters[c(5, 10, 15, 20, 25)]\nx <- c(1, 2, 5)\nletters[x]\n\n#access matrix values\nmat <- matrix(c(1:4, 20:17), ncol = 2)\nmat\n\nmat[2, 2]\nmat[ , 1]\nmat[2, ]\n\nmat[2:4, 1]\nmat[c(2, 4), ]\n\nmat <- matrix(c(1:4, 20:17), ncol = 2,\n              dimnames = list(NULL,\n                              c(\"First\", \"Second\"))\n              )\nmat\n\nmat<-matrix(c(1:4,20:17),ncol=2,\n            dimnames=list(NULL,\n                          c(\"First\",\"Second\")))\nmat\n\nmat[, \"First\"]\n\n#assign after creation\nmat <- matrix(c(1:4, 20:17), ncol = 2)\ndimnames(mat) <- list(NULL, c(\"First\", \"Second\"))\nmat\n\nstr(mat)\nattributes(mat)\n\n#data frames\nstr(iris)\n\niris[1:4, 2:4]\niris[1, ]\n\niris[ , c(\"Sepal.Length\", \"Species\")]\n\niris$Sepal.Length\n\n#lists\nx <- list(\"HI\", c(10:20), 1)\nx[[1]]\nx[[3]]\n\nx[[2]]\nx[[2]][4:5]\n\nx <- list(\"HI\", c(10:20), 1)\nstr(x)\nx <- list(First=\"Hi\", Second=c(10:20), Third=1)\nx$Second\n\nstr(iris)\niris[[2]]\n\n#setting attributes\nx <- seq(from = 1, to = 10, by = 2)\nstr(x)\nattributes(x)\n\nnames(x) <- letters[1:length(x)]\nstr(x)\nattributes(x)\n\nattr(x, which = \"MyAttr\") <- \"Best vector ever\"\nstr(attributes(x))\nattributes(x)$MyAttr\n\n\n#####################################################\n##Reading/Writing Data\n\n#packages\ninstall.packages(\"readr\")\n#can do multiple packages at once\ninstall.packages(c(\"readr\", \"readxl\", \"haven\", \"DBI\", \"httr\"))\n\nlibrary(\"readr\")\nrequire(\"haven\")\n\ninstall.packages(\"tidyverse\")\nlibrary(tidyverse)\n\n#working directory\ngetwd()\nsetwd(\"E:\\\\Other\\\\DataScienceR\")\n#or\nsetwd(\"E:/Other/DataScienceR\")\n\n#reading data\nscoreData <- read_csv(file = \"https://raw.githubusercontent.com/jbpost2/DataScienceR/master/datasets/scores.csv\")\n\nscoreData\nattributes(scoreData)$class\n\nscoreStub <- read_csv(\"https://raw.githubusercontent.com/jbpost2/DataScienceR/master/datasets/scoresStub.csv\")\n\nscoreStub\n\nggplot(data = scoreData, aes(x = day, y = AFinal)) + geom_boxplot()\n\n\n#overwrite day column with factor version\nscoreData$day <- as.factor(scoreData$day)\nlevels(scoreData$day)\n\nscoreData$day <- ordered(scoreData$day, levels = levels(scoreData$day)[c(7, 5, 1, 3, 4, 2, 6)])\n\nlevels(scoreData$day)\n\nggplot(data = filter(scoreData, day %in% c(\"Mon\", \"Sat\", \"Sun\", \"Thu\")), aes(x = day, y = AFinal)) + \n  geom_boxplot()\n\numpData <- read_delim(\"https://raw.githubusercontent.com/jbpost2/DataScienceR/master/datasets/umps2012.txt\", delim = \">\", col_names = c(\"Year\", \"Month\", \"Day\", \"Home\", \"Away\", \"HPUmpire\"))\n\numpData\n\n#a guess based on reading a few columns\ncigData <- read_fwf(\"https://raw.githubusercontent.com/jbpost2/DataScienceR/master/datasets/cigarettes.txt\", col_positions = fwf_empty(\"https://raw.githubusercontent.com/jbpost2/DataScienceR/master/datasets/cigarettes.txt\", col_names = c(\"brand\", \"tar\", \"nicotine\", \"weight\", \"co\")))\n\ncigData\n\n#need to skip first line!\ncigData <- read_fwf(\"https://raw.githubusercontent.com/jbpost2/DataScienceR/master/datasets/cigarettes.txt\", col_positions = fwf_empty(\"https://raw.githubusercontent.com/jbpost2/DataScienceR/master/datasets/cigarettes.txt\", col_names = c(\"brand\", \"tar\", \"nicotine\", \"weight\", \"co\")), skip = 1)\n\ncigData\n\n#another option\ncigData<-read_fwf(\"https://raw.githubusercontent.com/jbpost2/DataScienceR/master/datasets/cigarettes.txt\", col_positions = fwf_widths(c(17, 4, 5, 11, 4), col_names = c(\"brand\", \"tar\", \"nicotine\", \"weight\", \"co\")), skip = 1)\n\ncigData\n\n\nlibrary(readxl)\n#just first sheet\nedData <- read_excel(\"datasets/censusEd.xls\", sheet = \"EDU01A\")\n\nedData\n\nexcel_sheets(\"datasets/censusEd.xls\")\n\n#just first sheet\nedData <- read_excel(\"datasets/censusEd.xls\", sheet = \"EDU01A\", \n                     range = cell_cols(\"A:D\"))\n\nedData\n\nlibrary(haven)\nbodyFatData<-read_spss(\"https://github.com/jbpost2/DataScienceR/blob/master/datasets/bodyFat.sav?raw=true.sav\")\n\nbodyFatData\n\nsmokeData<-read_sas(\"https://github.com/jbpost2/DataScienceR/blob/master/datasets/smoke2003.sas7bdat?raw=true\")\n\nsmokeData\n\nstr(smokeData)\n\nattr(smokeData$SDDSRVYR, \"label\")\n\nwrite_csv(x = smokeData, path = \"E:/Other/DataScienceR/datasets/output/smokeData.csv\")\n\nwrite_csv(x = bodyFatData, path = \"E:/Other/DataScienceR/datasets/smokeData.csv\", append = TRUE)\n\n\n\n#####################################################\n##Data manipulation\n\n#logical statements\n#Use of ==, !=, >=, <=, >, <\n\"hi\" == \" hi\"\n\"hi\" == \"hi\"\n4 == 1\n4 >= 3\n4 != 1\n\"hi\" != \"hello\"\n\n#use of is. functions\nis.numeric(\"Word\")\nis.numeric(10)\nis.character(\"10\")\nis.na(c(1:2, NA, 3))\n\niris <- tbl_df(iris)\niris\n\n##Obtain a vector that indicates which rows are \"setosa\" species\niris$Species == \"setosa\"\n\niris[iris$Species == \"setosa\", ]\n\nfilter(iris, Species == \"setosa\")\n\nfilter(iris, Species != \"setosa\")\n\n#silly example\na <- 5\nif (a < 10){\n  print(\"hi\")\n}\n\nif (a < 10){\n  print(\"hi\")\n} else if (a < 40){\n  print(\"goodbye\")\n} else {\n  print(\"aloha\")\n}\n\n#silly example\na <- 20\nif (a < 10){\n  print(\"hi\")\n}\n\nif (a < 10){\n  print(\"hi\")\n} else if (a < 40){\n  print(\"goodbye\")\n} else {\n  print(\"aloha\")\n}\n\na <- \"string\"\nif (a < 10){\n  print(\"hi\")\n}\n\nif (a < 10){\n  print(\"hi\")\n} else if (a < 40){\n  print(\"goodbye\")\n} else {\n  print(\"aloha\")\n}\n\n\n#coerce numeric to string\nc(\"hi\", 10)\n#coerce TRUE/FALSE to numeric\nc(TRUE, FALSE) + 0\n\n#logical to character\nc(TRUE, \"hi\")\n\nas.numeric(c(TRUE, FALSE, TRUE))\nmean(c(TRUE, FALSE, TRUE))\nas.character(c(1, 2, 3.5, TRUE))\n\n#compound statements\nset.seed(3)\nx <- runif(n = 10, min = 0, max = 1); x\n(x < 0.25) | (x > 0.75)\n(x < 0.25) || (x > 0.75)\n\nfilter(iris, (Petal.Length > 1.5) & (Petal.Width > 0.3) & \n         (Species == \"setosa\"))\n\n(iris$Petal.Length > 1.5) & (iris$Petal.Width > 0.3) &\n  (iris$Species == \"setosa\")\n\n#won't work!\nif ((iris$Petal.Length > 1.5) & (iris$Petal.Width > 0.3) &\n    (iris$Species == \"setosa\")) {\n  \"Large Setosa\"\n}\n\n#syntax\nifelse(vector_condition, if_true_do_this, if_false_do_this)\n\nifelse((iris$Petal.Length > 1.5) & (iris$Petal.Width > 0.3) & \n         (iris$Species == \"setosa\"), \"L-S\", \"NotL-S\")\n\ntransmute(iris, Size =\n            ifelse((Petal.Length > 1.5) & (Petal.Width > 0.3) &\n                     (Species == \"setosa\"), \"L-S\", \"NotL-s\"))\n\nmutate(iris, Size =\n         ifelse((Petal.Length > 1.5) & (Petal.Width > 0.3) &\n                  (Species == \"setosa\"), \"LS\", \"NotLS\"))\n\n#dplyr\n#install.packages(\"Lahman\")\nlibrary(Lahman)\nhead(Batting, n = 4) #look at just first 4 observations\n\nBatting <- tbl_df(Batting)\nBatting\n\nfilter(Batting, teamID == \"PIT\")\nfilter(Batting, teamID == \"PIT\" & yearID == 2000)\n\n#reorder by teamID\narrange(Batting, teamID)\n#get secondary arrangement as well\narrange(Batting, teamID, G)\n#descending instead\narrange(Batting, teamID, desc(G))\n\narrange(filter(Batting, teamID == \"PIT\"), desc(G))\nBatting %>% filter(teamID == \"PIT\") %>% arrange(desc(G))\n\na<-runif(n = 10)\na\n#silly example\na %>% quantile()\na %>% quantile() %>% range()\n\n#Choose a single column by name\nBatting %>% select(X2B)\n#all columns between\nBatting %>% select(X2B:HR)\n#all columns containing\nBatting %>% select(contains(\"X\"))\n#all columns starting with\nBatting %>% select(starts_with(\"X\"))\n#all columns ending with\nBatting %>% select(ends_with(\"ID\"))\n\n##Create an Extra Base Hits variable\nBatting %>% mutate(ExtraBaseHits = X2B + X3B + HR)\n#can't see it!\nBatting %>% mutate(ExtraBaseHits = X2B + X3B + HR) %>% select(ExtraBaseHits)\n#transmute will keep the new variable only\nBatting %>% transmute(ExtraBaseHits = X2B + X3B + HR)\n\nBatting %>% summarise(AvgX2B = mean(X2B, na.rm = TRUE))\nBatting %>% group_by(teamID) %>% summarise(AvgX2B = mean(X2B, na.rm = TRUE))\n\n# create two simple data frames\na <- data_frame(color = c(\"green\", \"yellow\", \"red\"), num = 1:3)\nb <- data_frame(color = c(\"green\", \"yellow\", \"pink\"), size = c(\"S\", \"M\", \"L\"))\na\nb\ninner_join(a, b)\nfull_join(a, b)\nleft_join(a, b)\nright_join(a, b)\nleft_join(b, a)\nsemi_join(a, b)\nanti_join(a, b)\n\nb <- b %>% rename(col = color)\na\nb\ninner_join(a, b, by = c(\"color\" = \"col\"))\n\n\n#####################################################\n##Numerical and Graphical Summaries\n\n#categorical data\ntitanicData <- read_csv(\"https://raw.githubusercontent.com/jbpost2/DataScienceR/master/datasets/titanic.csv\")\ntitanicData\n\n#numeric summaries\ntable(titanicData$embarked)\ntable(titanicData$survived)\ntable(titanicData$sex)\ntable(titanicData$survived,\n      titanicData$sex)\ntable(titanicData$survived,\n      titanicData$embarked)\ntable(titanicData$sex,\n      titanicData$embarked)\ntable(titanicData$sex, titanicData$embarked, titanicData$survived)\ntab <- table(titanicData$sex, titanicData$embarked, titanicData$survived)\n\nstr(tab)\n\n#returns embarked vs survived table for females\ntab[1, , ]\n#returns embarked vs survived table for males\ntab[2, , ]\n#returns survived vs sex table for embarked \"C\"\ntab[, 1, ]\n#Survived status for males that embarked at \"Q\"\ntab[2, 2, ]\n\n#bar plots\nggplot(data = titanicData, aes(x = as.factor(embarked)))\ng <- ggplot(data = titanicData, aes(x = as.factor(embarked)))\ng + geom_bar()\ng <- ggplot(data = titanicData %>% drop_na(embarked),\n            aes(x = as.factor(embarked)))\ng + geom_bar()\n\n#Fix x axis, x axis label and give title\ng <- ggplot(data = titanicData %>% drop_na(embarked),\n            aes(x = as.factor(embarked)))\ng + geom_bar() + \n  labs(x = \"City Embarked\", title = \"Bar Plot of Embarked City \n       for Titanic Passengers\") + \n  scale_x_discrete(labels = c(\"Cherbourg\",\"Queenstown\",\"Southampton\"))\n\n#filled bar plot\ng <- ggplot(data = titanicData %>% drop_na(embarked),\n            aes(x = as.factor(embarked)))\ng + geom_bar(aes(fill = as.factor(survived)))\n\ng <- ggplot(data = titanicData %>% drop_na(embarked),\n            aes(x = as.factor(embarked)))\ng + geom_bar(aes(fill = as.factor(survived))) +\n  labs(x = \"City Embarked\", \n       title = \"Bar Plot of Embarked City for Titanic Passengers\") + \n  scale_x_discrete(labels = c(\"Cherbourg\", \"Queenstown\", \"Southampton\")) + \n  scale_fill_discrete(name = \"Surived\", labels = c(\"No\",\"Yes\"))\n\ng <- ggplot(data = titanicData %>% drop_na(embarked),\n            aes(x = as.factor(embarked)))\ng + geom_bar(aes(fill = as.factor(survived))) +\n  labs(x = \"City Embarked\", \n       title = \"Bar Plot of Embarked City for Titanic Passengers\") +\n  scale_x_discrete(labels = c(\"Cherbourg\", \"Queenstown\", \"Southampton\")) + \n  scale_fill_discrete(name = \"Surived\",labels = c(\"No\",\"Yes\")) +\n  coord_flip()\n\n#side-by-side bar plot\ntwoWayData<-titanicData %>% group_by(embarked, survived) %>%\n  summarise(count=n())\ntwoWayData\n\ng <- ggplot(data = twoWayData %>% drop_na(embarked), \n            aes(x = as.factor(embarked), y = count, fill = as.factor(survived)))+\n  geom_bar(stat = \"identity\", position = \"dodge\") %>%\n  labs(x = \"City Embarked\", \n       title = \"Bar Plot of Embarked City for Titanic Passengers\") + \n  scale_x_discrete(labels = c(\"Cherbourg\", \"Queenstown\", \"Southampton\")) + \n  scale_fill_discrete(name = \"Surived\", labels = c(\"No\", \"Yes\"))\n\n#save table/graph\ntab <- tbl_df(table(titanicData$embarked,titanicData$survived))\n\nnames(tab) <- c(\"Embarked\",\"Survived\",\"Count\")\n\nwrite_csv(x = tab, path = \"titanicTable.csv\", col_names = TRUE)\n\n#by default ggsave saves last plot\n#guesses file type by extension\nggsave(filename = \"output/titanicBarPlot.png\")\nggsave(filename = \"output/titanicBarPlot.pdf\")\n\n\n#quantitative data\nCO2 <- tbl_df(CO2)\nCO2\n\nmean(CO2$uptake)\n#note you can easily get a trimmed mean\nmean(CO2$uptake, trim = 0.05) #5% trimmed mean\nmedian(CO2$uptake)\n\n#quartiles and mean\nsummary(CO2$uptake)\nvar(CO2$uptake)\nsd(CO2$uptake)\nIQR(CO2$uptake)\nquantile(CO2$uptake, probs = c(0.1, 0.2))\n#combine\nstats <- c(summary(CO2$uptake), var(CO2$uptake),\n           sd(CO2$uptake), quantile(CO2$uptake, probs = c(0.1, 0.2)))\nstats\nstr(stats)\nattributes(stats)\n#special names function\nnames(stats)[7:10] <- c(\"Var\", \"SD\", \"10thP\", \"20thP\")\nstats\n\ncov(CO2$conc, CO2$uptake)\ncor(CO2$conc, CO2$uptake)\n\n#summaries by subsets of data\nCO2 %>% group_by(Treatment) %>% summarise(avg = mean(uptake))\nCO2 %>% group_by(Treatment) %>% summarise(med = median(uptake))\nCO2 %>% group_by(Treatment) %>% summarise(var = var(uptake))\n\nCO2 %>% group_by(Treatment, Type) %>% summarise(avg = mean(uptake))\n\n#dot plots\ng <- ggplot(CO2, aes(x = uptake))+\n  geom_dotplot()\n\ng <- ggplot(CO2, aes(x = uptake))+\n  geom_dotplot(col = \"Blue\")\n\ng <- ggplot(CO2, aes(x = uptake))+\n  geom_dotplot(aes(col = Treatment))\n\ng <- ggplot(CO2, aes(x = uptake))+\n  geom_dotplot(aes(col = Treatment),\n               stackgroups = TRUE, method = \"histodot\",\n               binpositions = \"all\",stackdir = \"down\")\n\n#histogram/density\ng <- ggplot(CO2, aes(x = uptake))+\n  geom_histogram()\n\ng <- ggplot(CO2, aes(x = uptake))+\n  geom_histogram(color = \"blue\", fill = \"red\", linetype = \"dashed\",\n                 size = 2,binwidth = 3)\n\ng <- ggplot(CO2, aes(x = uptake))+\n  geom_density()\n\ng <- ggplot(CO2, aes(x = uptake))+\n  geom_density(adjust = 0.25, alpha = 0.5, aes(fill = Treatment))\n\ng <- ggplot(CO2, aes(x = uptake))+\n  geom_histogram(aes(y = ..density.., fill = Treatment))+\n  geom_density(adjust = 0.25, alpha = 0.5, aes(fill = Treatment)) \n\n#ecdf\ng <- ggplot(CO2, aes(x = uptake))+\n  stat_ecdf(geom = \"step\")\n\ng <- ggplot(CO2, aes(x = uptake, color = Treatment)) +\n  stat_ecdf(geom = \"step\") +\n  ylab(\"ECDF\")\n\n#scatter plots\nscoresFull <- read_csv(\"https://raw.githubusercontent.com/jbpost2/DataScienceR/master/datasets/scoresFull.csv\")\nscoresFull\n\ng <- ggplot(scoresFull, aes(x = homeRushYds, y = HFinal)) +\n  geom_point()\n\ng <- ggplot(scoresFull, aes(x = homeRushYds, y = HFinal)) +\n  geom_point() +\n  geom_smooth() +\n  geom_smooth(method = lm, col = \"Red\") \n\npaste(\"Hi\", \"What\", \"Is\", \"Going\", \"On\", \"?\", sep = \" \")\npaste(\"Hi\", \"What\", \"Is\", \"Going\", \"On\", \"?\", sep = \".\")\n\ncorrelation <- cor(scoresFull$homeRushYds,scoresFull$HFinal)\n\ng <- ggplot(scoresFull, aes(x = homeRushYds,y = HFinal)) +\n  geom_point() +\n  geom_smooth() +\n  geom_smooth(method = lm, col = \"Red\") + \n  geom_text(x = 315, y = 10, size = 5, label = paste0(\"Correlation = \", round(correlation, 2)))\n\ng <- ggplot(scoresFull, aes(x = homeRushYds, y = HFinal)) +\n  geom_point() +\n  geom_smooth() +\n  geom_smooth(method = lm, col = \"Red\") + \n  geom_rug()\n\ng <- ggplot(scoresFull, aes(x = homeRushYds, y = HFinal)) +\n  geom_point()+\n  facet_grid(. ~ surface)\n\ng <- ggplot(scoresFull, aes(x = homeRushYds, y = HFinal))+\n  geom_point()+  \n  facet_grid(roof ~ surface)\n\ng <- ggplot(scoresFull, aes(x = homeRushYds,y = HFinal)) +\n  geom_point(aes(col = homeSpread), alpha = 0.3, size = 0.5) +  \n  facet_grid(roof ~ surface)\n\npairs(select(scoresFull, Hturnovers, homeRushYds,\n             homePassYds, HFinal), cex = 0.3)\n\nCorrelation <- cor(select(scoresFull, Hturnovers, homeRushYds,\n                          homePassYds, HFinal), method = \"spearman\")\n#install corrplot library\nlibrary(corrplot)\ncorrplot(Correlation, type = \"upper\",\n         title = \"Figure 2: Correlation matrix of variables.\",\n         tl.pos = \"lt\")\ncorrplot(Correlation, type = \"lower\", method = \"number\",\n         add = TRUE, diag = FALSE, tl.pos = \"n\")\n\n#install GGally\nlibrary(GGally)\nggpairs(iris, aes(colour = Species, alpha = 0.4))\n\n#box and violin plots\ng <- ggplot(scoresFull, aes(x = surface, y = homePassYds)) +\n  geom_boxplot(fill = \"grey\")\n\ng <- ggplot(scoresFull, aes(x = surface, y = homePassYds)) +\n  geom_boxplot(fill = \"grey\") +\n  geom_jitter(aes(col = roof), alpha = 0.3, size = 0.3) +\n  stat_summary(fun.y = mean, geom = \"line\", \n               lwd = 1.5, aes(group = roof, col = roof))\n\ng <- ggplot(scoresFull, aes(x = surface, y = homePassYds))+\n  geom_violin(fill = \"grey\")\n\noneDate<-paste(scoresFull$date[1], scoresFull$season[1], sep = \"-\")\noneDate\n\nlibrary(lubridate)\nas.Date(oneDate,\"%d-%b-%Y\")\nas.Date(oneDate,\"%d-%b-%Y\")+1\n\nscoresFull$date <- paste(scoresFull$date, scoresFull$season, sep = \"-\") %>% \n  as.Date(\"%d-%b-%Y\")\n\nsubScores <- scoresFull %>% \n  filter(homeTeam %in% c(\"Pittsburgh Steelers\", \"Cleveland Browns\",\n                         \"Baltimore Ravens\", \"Cincinnati Bengals\")) %>% \n  group_by(season, homeTeam) %>%\n  summarise(homeAvgYds = mean(homePassYds + homeRushYds))\n\nsubScores\n\ng <- ggplot(subScores, aes(x = season, y = homeAvgYds, color = homeTeam)) +\n  geom_line(lwd = 2)\n\n#3d plots\ninstall.packages(\"plot3Drgl\")\nlibrary(plot3Drgl)\n\nscatter3D(x = scoresFull$homeRushYds, y = scoresFull$awayRushYds,\n          z = scoresFull$HFinal)\n\nplotrgl()\n\n\n#####################################################\n##Basic Analyses\n\nvoting <- tbl_df(read.csv(\"datasets/counties.csv\", header = TRUE))\nvoting\n\nvotePlot <- ggplot(voting, aes(x = college, y = income))\nvotePlot + \n  geom_point()+\n  geom_text(x = 40, y = 15000, label = round(cor(voting$college, voting$income), 2))\n\n#SLR\nlm(income ~ college, data = voting)\nfit <- lm(income ~ college, data = voting)\n\nattributes(fit)\nfit[[1]]\ncoefficients(fit)\nfit$coefficients\n\nfit[[2]]\nresiduals(fit)\nfit$residuals\n\n#no generic function for some things\nrank(fit)\ny(fit)\nfit$rank\n\n#ANOVA table (F tests)\nanova(fit)\n\n#coefficient type III tests\nsummary(fit)\n\nplot(fit)\n\nvotePlot +\n  geom_point() +\n  geom_smooth(method = \"lm\") + \n  geom_smooth()\n\npredict(fit, newdata = data.frame(college = c(40, 10)))\npredict(fit, newdata = data.frame(college = c(40, 10)), se.fit = TRUE)\npredict(fit, newdata = data.frame(college = c(40, 10)),\n        se.fit = TRUE, interval = \"confidence\")\npredict(fit, newdata = data.frame(college = c(40, 10)),\n        se.fit = TRUE, interval = \"prediction\")\n\nvotePlot +\n  geom_point(aes(col = region)) +\n  geom_smooth(method = \"lm\", aes(col = region))\n\nfits <- voting %>% group_by(region) %>% \n  do(model = lm(income ~ college, data = .))\nnames(fits)\n\nfits$model[[1]]\nfits$model[[2]]\n\n#mlr\nfit2<-lm(income ~ college + Perot, data = voting)\nanova(fit2)\nsummary(fit2)\ncoef(fit2)\nfit2$rank\nplot(fit2)\npredict(fit2, newdata = data.frame(college = 40, Perot = 20))\n",
    "created" : 1502219510227.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "4285631619",
    "id" : "73A8CED3",
    "lastKnownWriteTime" : 1502219463,
    "last_content_update" : 1502219463,
    "path" : "~/DevWork/RApps/example_r_app/justRCode.R",
    "project_path" : "justRCode.R",
    "properties" : {
    },
    "relative_order" : 3,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}